buildscript {
    ext {
        springBootVersion = '2.0.6.RELEASE'
        mooworkVersion = '1.2.0'
        ltgtVersion = '0.19'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:${mooworkVersion}")
        classpath("net.ltgt.gradle:gradle-apt-plugin:${ltgtVersion}")
    }
}

apply plugin: "net.ltgt.apt"
apply plugin: 'com.moowork.node'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.cinema'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 11

node {
    version = '9.3.0'
    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/../frontend")
}

repositories {
    mavenCentral()
    maven { url 'https://projectlombok.org/edge-releases' }
}

ext {
    vavrVersion = '0.9.2'
    swaggerVersion = '2.8.0'
    junitJupiterVersion = '5.1.0'
    junitPlatformVersion = '1.1.0'
    junit4Version = '4.12'
    junitVintageVersion = '5.1.0'
    mapstructVersion = '1.3.0.Beta1'
    jaxbApiVersion = '2.3.0'
    mockitoCoreVersion = '2.15.0'
    gradleAptPluginVersion = '0.19'
    lombokVersion = 'edge-SNAPSHOT'
    passayVersion = '1.3.1'
    nimbudJoseJwtVersion = '5.5'
    postgresqlVersion = '42.2.5'
    jacksonDatatypeJsr310Version = '2.4.0'
    springVersion = '5.1.1.RELEASE'
    springSessionCoreVersion = '2.1.0.RELEASE'
    springSessionVersion = '1.3.3.RELEASE'
    jaxbVersion = '2.3.0'
    javaxActivationVersion = '1.1.1'
    lettuceVersion = '5.0.2.RELEASE'
    javassistVersion = '3.23.1-GA'
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-data-rest:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-mail:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    implementation('org.springframework.session:spring-session-core')
    implementation("org.springframework.session:spring-session-data-redis:${springSessionCoreVersion}")
    implementation("io.lettuce:lettuce-core:${lettuceVersion}")
    implementation("io.springfox:springfox-swagger2:${swaggerVersion}")
    implementation("io.springfox:springfox-swagger-ui:${swaggerVersion}")
    implementation("org.mapstruct:mapstruct-jdk8:${mapstructVersion}")
    implementation("org.passay:passay:${passayVersion}")
    implementation("io.vavr:vavr:${vavrVersion}")
    implementation("org.javassist:javassist:${javassistVersion}")

    implementation("javax.xml.bind:jaxb-api:${jaxbVersion}")
    implementation("com.sun.xml.bind:jaxb-impl:${jaxbVersion}")
    implementation("org.glassfish.jaxb:jaxb-runtime:${jaxbVersion}")
    implementation("javax.activation:activation:${javaxActivationVersion}")

    runtimeOnly('org.postgresql:postgresql')
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    compileOnly("org.mapstruct:mapstruct-processor:${mapstructVersion}")
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}"


    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
}

task webpack(type: YarnTask, dependsOn: yarn) {
    inputs.files(fileTree("${project.projectDir}/../frontend/"))
    outputs.dir("${project.projectDir}/src/main/resources/static/")

    args = ['build']
}

task moveJStoSpring(type: Copy) {
    from "${project.projectDir}/../frontend/dist/"
    into "${project.projectDir}/src/main/resources/static/"
}

moveJStoSpring.dependsOn 'webpack'
processResources.dependsOn 'moveJStoSpring'